{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Le bon délire ici c'est de pouvoir présenter du code react interprété directement sur la page. Coolos.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components,\n      props: {\n        \"id\": \"du-code-live-\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h3\",\n      props: {\n        \"href\": \"#du-code-live-\",\n        \"aria-hidden\": true,\n        \"className\": \"anchor\"\n      }\n    }), `Du code live :`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\",\n        \"metastring\": \"react-live\",\n        \"react-live\": true\n      }\n    }, `const onClick = () => {\n  alert(\"Omar m'a cliquer\");\n};\nrender(<button onClick={onClick}>Cliquez moi</button>);\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components,\n      props: {\n        \"id\": \"juste-du-code\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h3\",\n      props: {\n        \"href\": \"#juste-du-code\",\n        \"aria-hidden\": true,\n        \"className\": \"anchor\"\n      }\n    }), `Juste du code`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `(function() {\n\nvar cache = {};\nvar form = \\$('form');\nvar minified = true;\n\nvar dependencies = {};\n\nvar treeURL = 'https://api.github.com/repos/PrismJS/prism/git/trees/gh-pages?recursive=1';\nvar treePromise = new Promise(function(resolve) {\n    \\$u.xhr({\n        url: treeURL,\n        callback: function(xhr) {\n            if (xhr.status < 400) {\n                resolve(JSON.parse(xhr.responseText).tree);\n            }\n        }\n    });\n});\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Un peu de texte au milieu du code`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-md\"\n      }\n    }, `# asdfasdfads\n\n- auesufuaus\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `code[class*=\"language-\"],\npre[class*=\"language-\"] {\n  color: black;\n  background: none;\n  font-family: Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace;\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  word-wrap: normal;\n  line-height: 1.5;\n\n  -moz-tab-size: 4;\n  -o-tab-size: 4;\n  tab-size: 4;\n\n  -webkit-hyphens: none;\n  -moz-hyphens: none;\n  -ms-hyphens: none;\n  hyphens: none;\n}\n`)));\n  }\n\n}"},"excerpt":"Le bon délire ici c'est de pouvoir présenter du code react interprété directement sur la page. Coolos. Du code live : Juste du code Un peu…","frontmatter":{"title":"React-Live & Exemple de code","date":"01/05/2018","categories":["Coding","Help"]},"timeToRead":1,"parent":{"__typename":"File","mtime":"2019-01-20T22:48:23.255Z","birthtime":"2019-01-20T22:48:23.255Z"}}},"pageContext":{"slug":"/react-live-exemple-de-code","prev":{"fields":{"slug":"/la-petite-cheatsheet-pour-le-markdown"},"frontmatter":{"title":"La petite Cheatsheet pour le Markdown","categories":["General"]}},"next":{"fields":{"slug":"/utiliser-un-component-react-en-mark-down"},"frontmatter":{"title":"Utiliser un component React en MarkDown","categories":["Coding"]}}}}